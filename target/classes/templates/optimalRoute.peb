<!DOCTYPE HTML>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"></script>
<style>
canvas:hover::after {
content: attr(title);
}
</style>
{% include "navigation" %}
<html>
<head>
    <title>FF14 Optimal Routes</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<h1>Calculation of optimal route</h1>
<form action="/optimalRoute" method="post">
    <p>Copypaste logs here:</p>
    <textarea class="chatLogs" id="inputLogs" name="inputLogs"
    oninput="this.style.height = ''; this.style.height = this.scrollHeight +'px'"></textarea>
    <p><input type="submit" id="submitLogs" value="Start calculation" />
    <input type="reset" value="Remove text" /></p>
</form>
Hide player name/coordinates (display as tooltip under cursor, not compatible with all browsers):
 <input type = "checkbox" class ="tooltipCheckBox">

<div id="canvasPanel"></div>

<script type="text/javascript">

$(document).ready(function() {
var isTooltipEnabled = false;
var responseData;
const canvasPanel = document.getElementById("canvasPanel");

$(".tooltipCheckBox").on('click', function(){
revalidateCanvas();
});

function revalidateCanvas(){
    isTooltipEnabled = !isTooltipEnabled;
    if(responseData == null) return;
    repaint();
    createCanvas(canvasPanel, responseData);
}

function repaint(){
while (canvasPanel.lastElementChild) {
   canvasPanel.removeChild(canvasPanel.lastElementChild);
 }
}

$("#submitLogs").click(function(e){
  e.preventDefault();
  $.ajax({
    url: "/optimalRoute",
    type: "POST",
    data: {"inputLogs" : $("#inputLogs").val()},
    success: function(result){
     $("#inputLogs").val('').trigger('input');
     repaint();
     responseData = JSON.parse(JSON.stringify(result));
     createCanvas(canvasPanel, responseData);
  }});
});

function createCanvas(canvasPanel, result){
for(logsId in result){
let canvas = document.createElement("canvas");
canvasPanel.appendChild(canvas);
let logs = drawCanvas(canvas, result[logsId]);

if(isTooltipEnabled == true)
canvas.addEventListener('mousemove', (function (e) {
  drawToolTip(e, canvas, logs);
}));
}
}

function getLogInfoText(log){
var inputPoints = log.doublePoint;
return log.name + ' ' +
JSON.stringify(inputPoints);
}

function drawToolTip(e, canvas, data){
        e.preventDefault();
        e.stopPropagation();
        canvas.title = "";

        var bounds = canvas.getBoundingClientRect();
        var canvasWidth = canvas.width;
        var canvasHeight = canvas.height;

        var currentX = e.clientX - bounds.left;
        var currentY = e.clientY - bounds.top;

        for(i in data){
        var logs = data[i]
        for(index in logs){
        var log = logs[index];
        var point = log.scaledGamePoint;
        var x = point.x;
        var y = point.y;
        var margin = 4;

         if(Math.abs(x - currentX) < margin
                && Math.abs(y - currentY) < margin)
                canvas.title = getLogInfoText(log);
        }
        }

  }

  function drawCanvas(canvas, parsedResult){
    var ctx = canvas.getContext("2d");
    var background = new Image();
    background.src = parsedResult.imageSrc;
    var logsList = JSON.parse(parsedResult.logs);
    background.onload = function(){
        canvas.width = background.width;
        canvas.height = background.height;
        ctx.drawImage(background,0,0);
     for(listInd in logsList){
         var list = logsList[listInd]
         var step;
         ctx.strokeStyle = 'purple';
         ctx.font = "bold 16px serif";
         ctx.fillStyle = "#ff0000";
         ctx.lineWidth = 3;
         ctx.beginPath();

    for (step = 0; step < list.length; step++) {
        var log = list[step];
        var scaledPoint1 = log.scaledGamePoint;
        ctx.moveTo(scaledPoint1.x, scaledPoint1.y);
        var src = JSON.parse(log.teleport) == true?
                "/images/tp.png" : "/images/x_mark.png";
        addMarker(src,ctx, scaledPoint1.x, scaledPoint1.y);
        if(isTooltipEnabled == false)
        ctx.fillText(getLogInfoText(log), scaledPoint1.x, scaledPoint1.y);
        if(step != list.length - 1){
        var scaledPoint2 = list[step + 1].scaledGamePoint;
        ctx.lineTo(scaledPoint2.x, scaledPoint2.y);
        }
        ctx.stroke();
    }
    }
    }
    return logsList;
}

function addMarker(src, ctx, x, y){
   var marker = new Image();
   marker.src = src;
   marker.onload = function(){
    var imgWidth = 30;
    var imgHeight = 30;
    ctx.drawImage(marker, x - imgWidth / 2, y - imgHeight / 2, imgWidth, imgHeight);
   }
}
});

$('.chatLogs').on('keydown', function(e){
  var ctrl = e.ctrlKey ? e.ctrlKey : ((e.keyCode === 17) ? true : false);
  if (e.keyCode === 86 && ctrl || e.keyCode === 67 && ctrl || e.keyCode === 88 && ctrl) {
    return true;
  } else {
    return false;
  }
});
</script>
</body>
</html>